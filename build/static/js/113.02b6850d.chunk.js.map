{"version":3,"file":"static/js/113.02b6850d.chunk.js","mappings":"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","sources":["features/checkAnswers.ts","features/calculateDietWeight.ts","components/CreateDietPage/CreateDietPage.tsx"],"sourcesContent":["// Here are algorithms that check if the answers are not too contadictory\r\n// these algorithms come from the AHP method which I used in my bachalor \r\ntype DietCriteriaData = {\r\n    amount: number,\r\n    wellBeing: number,\r\n    health: number,\r\n    price: number,\r\n    moreFat: number,\r\n    buildingMuscleMass: number,\r\n  };\r\n\r\n\r\nconst calculateLambda = (criterionsWeightList : number[], sumeOfColumnsList : number[] ) => {\r\n    let lambda = 0;\r\n    for(let i = 0; i < criterionsWeightList.length; i++){\r\n       lambda = lambda + criterionsWeightList[i] * sumeOfColumnsList[i];\r\n    };\r\n    return lambda;\r\n};\r\n\r\nfunction multiply(a : number[][], b : number [][]) {\r\n    var aNumRows = a.length, aNumCols = a[0].length,\r\n        bNumRows = b.length, bNumCols = b[0].length,\r\n        m = new Array(aNumRows);  // initialize array of rows\r\n    for (var r = 0; r < aNumRows; ++r) {\r\n      m[r] = new Array(bNumCols); // initialize the current row\r\n      for (var c = 0; c < bNumCols; ++c) {\r\n        m[r][c] = 0;             // initialize the current cell\r\n        for (var i = 0; i < aNumCols; ++i) {\r\n          m[r][c] += a[r][i] * b[i][c];\r\n        }\r\n      }\r\n    }\r\n    return m;\r\n};\r\n\r\nfunction CreateAnswersMatrix(answersList : number[]) {\r\n    let i : number = -1;\r\n    const answersMatrix : number[][] = [\r\n        answersList,\r\n        answersList,\r\n        answersList,\r\n        answersList,\r\n        answersList,\r\n        answersList,\r\n    ]\r\n    .map((rowOfAnswers : number[]) => {\r\n        i++;\r\n        return(\r\n            rowOfAnswers.map((answer : number) => {\r\n                return answersList[i]/answer;\r\n            })\r\n        );\r\n    });\r\n   return answersMatrix;\r\n};\r\n\r\nfunction assumeRows(answersMatrix : number[][]){\r\n    const reducer = (accumulator : number, currentValue : number) => accumulator + currentValue;\r\n    const sumeOfRows : number[] = answersMatrix.reduce((sumeOfRow : number[], rowOfAnswers : number []) => {\r\n        sumeOfRow.push(rowOfAnswers.reduce(reducer));\r\n        return sumeOfRow;\r\n    }, []);\r\n\r\n    return sumeOfRows;\r\n};\r\n\r\nfunction assumeColumns(answersMatrix : number[][]){\r\n    let i : number = -1;\r\n    const sumeOfColumns : number[] = answersMatrix.reduce((sumeOfColumns : number[], rowOfAnswers : number []) => {\r\n        i++;\r\n        sumeOfColumns[i] = 0;\r\n        rowOfAnswers.forEach((value : number) => {sumeOfColumns[i] = sumeOfColumns[i] + value;});\r\n        return sumeOfColumns;\r\n    }, []);\r\n\r\n    return sumeOfColumns;\r\n}\r\n\r\nexport const checkAnswers = (answers: DietCriteriaData) : boolean => {\r\n    \r\n    const answersList : number[] = [\r\n        answers.amount,\r\n        answers.wellBeing,\r\n        answers.health,\r\n        answers.price,\r\n        answers.moreFat,\r\n        answers.buildingMuscleMass,\r\n    ];\r\n    \r\n\r\n    const answersMatrix = CreateAnswersMatrix(answersList);\r\n\r\n    const sumeOfRows = assumeRows(answersMatrix);\r\n\r\n    const reducer = (accumulator : number, currentValue : number) => accumulator + currentValue;\r\n    const sumeOfMatrix : number = sumeOfRows.reduce(reducer);\r\n\r\n    const criterionsWeight : number[] = sumeOfRows.map((value : number) => value/sumeOfMatrix);\r\n\r\n    const sumeOfColumns : number[] = assumeColumns(answersMatrix);\r\n\r\n    const lambdaMax : number = calculateLambda(criterionsWeight, sumeOfColumns);\r\n\r\n    const factorCI : number= (lambdaMax - answersList.length)/(answersList.length - 1);\r\n\r\n    const factorCR : number = factorCI / 0.6;\r\n\r\n    return (factorCR < 1 ? true : false);\r\n};\r\n\r\nexport const calculateAHP = (answers: DietCriteriaData) => {\r\n\r\n    const answersList : number[] = [\r\n        answers.amount,\r\n        answers.wellBeing,\r\n        answers.health,\r\n        answers.price,\r\n        answers.moreFat,\r\n        answers.buildingMuscleMass,\r\n    ];\r\n    const answersMatrix = CreateAnswersMatrix(answersList);\r\n    const MatrixSquare = multiply(answersMatrix,answersMatrix);\r\n    const sumeOfRows = assumeRows(answersMatrix);\r\n\r\n    const reducer = (accumulator : number, currentValue : number) => accumulator + currentValue;\r\n    const sumeOfMatrix : number = sumeOfRows.reduce(reducer);\r\n    const criterionsWeight : number[] = sumeOfRows.map((value : number) => value/sumeOfMatrix);\r\n    \r\n\r\n   const answersListDict : Record<string, number> = {};\r\n\r\n   answersListDict[\"amount\"] = criterionsWeight[0];\r\n   answersListDict[\"wellBeing\"] = criterionsWeight[1];\r\n   answersListDict[\"health\"] = criterionsWeight[2];\r\n   answersListDict[\"price\"] = criterionsWeight[3];\r\n   answersListDict[\"moreFat\"] = criterionsWeight[4];\r\n   answersListDict[\"buildingMuscleMass\"] = criterionsWeight[5];\r\n   \r\n    return answersListDict;\r\n};\r\n\r\n\r\n","import {useState} from \"react\";\r\nimport {IDietsResultsData} from '../App';\r\n\r\n// Here are algorithms that calculate the best choice using 6 criteria\r\n// these algorithms come from the AHP method which I used in my bachalor \r\ninterface DietsData {\r\n    name : string,\r\n    dietValue: Record<string,number>\r\n};\r\n\r\n\r\nconst dietOptions: DietsData[] = [\r\n    // diet options data...\r\n    {\r\n        name: 'Fit Diet',\r\n        dietValue : {\r\n            [\"amount\"] : 5,\r\n            [\"wellBeing\"] : 7,\r\n            [\"health\"] : 8,\r\n            [\"price\"] : 7,\r\n            [\"moreFat\"] : 4,\r\n            [\"buildingMuscleMass\"] : 5,\r\n        },\r\n    },\r\n    {\r\n        name: 'Keto Diet',\r\n        dietValue : {\r\n            [\"amount\"] : 4,\r\n            [\"wellBeing\"] : 9,\r\n            [\"health\"] : 4,\r\n            [\"price\"] : 2,\r\n            [\"moreFat\"] : 9,\r\n            [\"buildingMuscleMass\"] : 7,\r\n        },\r\n    },\r\n    {\r\n        name: 'Mediterranean Diet',\r\n        dietValue : {\r\n            [\"amount\"] : 5,\r\n            [\"wellBeing\"] : 7,\r\n            [\"health\"] : 9,\r\n            [\"price\"] : 5,\r\n            [\"moreFat\"] : 4,\r\n            [\"buildingMuscleMass\"] : 6,\r\n        },\r\n    },\r\n    {\r\n        name: 'Low-carb Diet',\r\n        dietValue : {\r\n            [\"amount\"] : 5,\r\n            [\"wellBeing\"] : 7,\r\n            [\"health\"] : 7,\r\n            [\"price\"] : 3,\r\n            [\"moreFat\"] : 8,\r\n            [\"buildingMuscleMass\"] : 5,\r\n        },\r\n    },\r\n    {\r\n        name: 'High Protein Diet',\r\n        dietValue : {\r\n            [\"amount\"] : 8,\r\n            [\"wellBeing\"] : 5,\r\n            [\"health\"] : 5,\r\n            [\"price\"] : 4,\r\n            [\"moreFat\"] : 6,\r\n            [\"buildingMuscleMass\"] : 9,\r\n        },\r\n    },\r\n    {\r\n        name: 'Traditional Diet',\r\n        dietValue : {\r\n            [\"amount\"] : 7,\r\n            [\"wellBeing\"] : 6,\r\n            [\"health\"] : 5,\r\n            [\"price\"] : 6,\r\n            [\"moreFat\"] : 5,\r\n            [\"buildingMuscleMass\"] : 6,\r\n        },\r\n    },\r\n];\r\n\r\nexport const findDiet = (answersResult : Record<string, number>) => { // names of criteria with values (from answers)\r\n   // const dietOptionsResult = fillDietsData(dietOptions); // name of diet and names of criteria with values\r\n    const finalResult : Record<string, number> = {\r\n        [\"Fit Diet\"] : 0,\r\n        [\"Keto Diet\"] : 0,\r\n        [\"Mediterranean Diet\"] : 0,\r\n        [\"Low-carb Diet\"] : 0,\r\n        [\"High Protein Diet\"] : 0,\r\n        [\"Traditional Diet\"] : 0,\r\n    }; // name of Diet and value \r\n\r\n    const nameOfDiets : string[] = [\r\n        \"Fit Diet\",\r\n        \"Keto Diet\",\r\n        \"Mediterranean Diet\",\r\n        \"Low-carb Diet\",\r\n        \"High Protein Diet\",\r\n        \"Traditional Diet\",\r\n    ];\r\n    \r\n    const nameOfCriteria : string[] = [\r\n        \"amount\",\r\n        \"wellBeing\",\r\n        \"health\",\r\n        \"price\",\r\n        \"moreFat\",\r\n        \"buildingMuscleMass\",\r\n    ];\r\n    \r\n    dietOptions.forEach((dietOption : DietsData) => {\r\n        let result = finalResult[dietOption.name];\r\n        nameOfCriteria.forEach((criteria: string) => {\r\n            let value = answersResult[criteria];\r\n            result = result + value * dietOption.dietValue[criteria];\r\n        });\r\n        finalResult[dietOption.name] = result;\r\n    });\r\n\r\n    const finalResultList : IDietsResultsData[] = [];\r\n    nameOfDiets.forEach((name : string) => {\r\n        finalResultList.push({name: name, result: finalResult[name]});\r\n    });\r\n    let l = finalResultList.length\r\n    for(let i = 0; i < l; i++){\r\n        let temp = finalResultList[i];\r\n        for(let j = i+1; j < l; j++){\r\n            if (temp.result < finalResultList[j].result){\r\n                let temp2 = temp;\r\n                temp = finalResultList[j];\r\n                finalResultList[j] = temp2;\r\n            };\r\n            finalResultList[i] = temp;\r\n            //finalResultList[j] = temp2;\r\n        };\r\n    };\r\n\r\n    return finalResultList;\r\n};\r\n\r\n/*\r\n    const finalResultList : IDietsresultsData[] = [\r\n        {name : \"Fit Diet\", result : finalResult[\"Fit Diet\"]},\r\n        {name : \"Fit Diet\", result : finalResult[\"Fit Diet\"]},\r\n        {name : \"Fit Diet\", result : finalResult[\"Fit Diet\"]},\r\n        {name : \"Fit Diet\", result : finalResult[\"Fit Diet\"]},\r\n        {name : \"Fit Diet\", result : finalResult[\"Fit Diet\"]},\r\n        {name : \"Fit Diet\", result : finalResult[\"Fit Diet\"]},\r\n    ];\r\n    */\r\n/*\r\nconst dietOptions: DietsData[] = [\r\n    // diet options data...\r\n    {\r\n    name: 'Fit Diet',\r\n    amount: 5,\r\n    wellBeing: 7,\r\n    health: 8,\r\n    price: 7,\r\n    moreFat: 4,\r\n    buildingMuscleMass: 5\r\n    },\r\n    {\r\n    name: 'Keto Diet',\r\n    amount: 4,\r\n    wellBeing: 9,\r\n    health: 4,\r\n    price: 2,\r\n    moreFat: 9,\r\n    buildingMuscleMass: 7,\r\n    },\r\n    {\r\n    name: 'Mediterranean Diet',\r\n    amount: 5,\r\n    wellBeing: 7,\r\n    health: 8,\r\n    price: 6,\r\n    moreFat: 4,\r\n    buildingMuscleMass: 6,\r\n    },\r\n    {\r\n    name: 'Low-carb Diet',\r\n    amount: 5,\r\n    wellBeing: 8,\r\n    health: 8,\r\n    price: 3,\r\n    moreFat: 8,\r\n    buildingMuscleMass: 6,\r\n    },\r\n    {\r\n    name: 'Fit Diet',\r\n    amount: 5,\r\n    wellBeing: 7,\r\n    health: 8,\r\n    price: 7,\r\n    moreFat: 4,\r\n    buildingMuscleMass: 5\r\n    },\r\n    {\r\n    name: 'High Protein Diet',\r\n    amount: 8,\r\n    wellBeing: 5,\r\n    health: 5,\r\n    price: 4,\r\n    moreFat: 6,\r\n    buildingMuscleMass: 9,\r\n    },\r\n];\r\n\r\nfunction fillDietsData (diets: DietsData[]){\r\n    const dietOptions = diets;\r\n    // Fit Diet\r\n    dietOptions[0].dietValue[\"amount\"] = 5,\r\n    dietOptions[0].dietValue[\"wellBeing\"] = 7,\r\n    dietOptions[0].dietValue[\"health\"] = 8,\r\n    dietOptions[0].dietValue[\"price\"] = 7,\r\n    dietOptions[0].dietValue[\"moreFat\"] = 4,\r\n    dietOptions[0].dietValue[\"buildingMuscleMass\"] = 5\r\n    // Keto Diet\r\n    dietOptions[1].dietValue[\"amount\"] = 4,\r\n    dietOptions[1].dietValue[\"wellBeing\"] = 9,\r\n    dietOptions[1].dietValue[\"health\"] = 4,\r\n    dietOptions[1].dietValue[\"price\"] = 2,\r\n    dietOptions[1].dietValue[\"moreFat\"] = 9,\r\n    dietOptions[1].dietValue[\"buildingMuscleMass\"] = 7,\r\n    // Mediterranean Diet\r\n    dietOptions[2].dietValue[\"amount\"] = 5,\r\n    dietOptions[2].dietValue[\"wellBeing\"] = 7,\r\n    dietOptions[2].dietValue[\"health\"] = 9,\r\n    dietOptions[2].dietValue[\"price\"] = 5,\r\n    dietOptions[2].dietValue[\"moreFat\"] = 4,\r\n    dietOptions[2].dietValue[\"buildingMuscleMass\"] = 6,\r\n    // Low-carb Diet\r\n    dietOptions[3].dietValue.set(\"amount\", 5)\r\n    dietOptions[3].dietValue.set(\"wellBeing\", 8)\r\n    dietOptions[3].dietValue.set(\"health\", 8)\r\n    dietOptions[3].dietValue.set(\"price\", 3)\r\n    dietOptions[3].dietValue.set(\"moreFat\", 8)\r\n    dietOptions[3].dietValue.set(\"buildingMuscleMass\", 6)\r\n    // High Protein Diet\r\n    dietOptions[4].dietValue.set(\"amount\", 8)\r\n    dietOptions[4].dietValue.set(\"wellBeing\", 5)\r\n    dietOptions[4].dietValue.set(\"health\", 5)\r\n    dietOptions[4].dietValue.set(\"price\", 4)\r\n    dietOptions[4].dietValue.set(\"moreFat\", 6)\r\n    dietOptions[4].dietValue.set(\"buildingMuscleMass\", 9)\r\n    // Traditional Diet\r\n    dietOptions[5].dietValue.set(\"amount\", 7)\r\n    dietOptions[5].dietValue.set(\"wellBeing\", 6)\r\n    dietOptions[5].dietValue.set(\"health\", 5)\r\n    dietOptions[5].dietValue.set(\"price\", 6)\r\n    dietOptions[5].dietValue.set(\"moreFat\", 5)\r\n    dietOptions[5].dietValue.set(\"buildingMuscleMass\", 6)\r\n\r\n    return dietOptions;\r\n};\r\n\r\nexport const findDiet = (answersResult : Map<string, number>) => { // names of criteria with values (from answers)\r\n    const dietOptionsResult = fillDietsData(dietOptions); // name of diet and names of criteria with values\r\n\r\n    const finalResult = new Map<string,number>(); // name of Diet and value \r\n    for(let i = 0; i < dietOptionsResult.length; i++){\r\n        finalResult.set(dietOptionsResult[i].name, 0);\r\n       // console.log(finalResult.get(dietOptionsResult[i].name));\r\n    }\r\n    finalResult.forEach((value : number, key : string) => {\r\n        answersResult.forEach((valueOfCriteriaFromAnswers : number, keyOfCriteriaFromAnswers : string) => {\r\n            dietOptionsResult.forEach((dietsData : DietsData) => {\r\n                dietsData.dietValue.forEach((basicValueOfCriteria : number, keyOfCriteria : string) => {\r\n                    if(dietsData.name === key && keyOfCriteria === keyOfCriteriaFromAnswers){\r\n                        value = value + basicValueOfCriteria * valueOfCriteriaFromAnswers;\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    });\r\n    \r\n    return finalResult;\r\n\r\n};\r\n*/\r\n\r\n/*\r\n dietOptionsResult.forEach((dietOption : DietsData) => {\r\n        let result = finalResult[dietOption.name];\r\n        answersResult.forEach((value : number, criteria: string) => {\r\n            result = result + value * dietOption.dietValue[criteria];\r\n        });\r\n        finalResult[dietOption.name] = result;\r\n    });\r\n    */\r\n\r\n    /*\r\nfunction fillDietsData (diets: DietsData[]){\r\n    const dietOptions = diets;\r\n    // Fit Diet\r\n    dietOptions[0].dietValue[\"amount\"] = 5,\r\n    dietOptions[0].dietValue[\"wellBeing\"] = 7,\r\n    dietOptions[0].dietValue[\"health\"] = 8,\r\n    dietOptions[0].dietValue[\"price\"] = 7,\r\n    dietOptions[0].dietValue[\"moreFat\"] = 4,\r\n    dietOptions[0].dietValue[\"buildingMuscleMass\"] = 5\r\n    // Keto Diet\r\n    dietOptions[1].dietValue[\"amount\"] = 4,\r\n    dietOptions[1].dietValue[\"wellBeing\"] = 9,\r\n    dietOptions[1].dietValue[\"health\"] = 4,\r\n    dietOptions[1].dietValue[\"price\"] = 2,\r\n    dietOptions[1].dietValue[\"moreFat\"] = 9,\r\n    dietOptions[1].dietValue[\"buildingMuscleMass\"] = 7,\r\n    // Mediterranean Diet\r\n    dietOptions[2].dietValue[\"amount\"] = 5,\r\n    dietOptions[2].dietValue[\"wellBeing\"] = 7,\r\n    dietOptions[2].dietValue[\"health\"] = 9,\r\n    dietOptions[2].dietValue[\"price\"] = 5,\r\n    dietOptions[2].dietValue[\"moreFat\"] = 4,\r\n    dietOptions[2].dietValue[\"buildingMuscleMass\"] = 6,\r\n    // Low-carb Diet\r\n    dietOptions[3].dietValue[\"amount\"] = 5,\r\n    dietOptions[3].dietValue[\"wellBeing\"] = 8,\r\n    dietOptions[3].dietValue[\"health\"] = 9,\r\n    dietOptions[3].dietValue[\"price\"] = 3,\r\n    dietOptions[3].dietValue[\"moreFat\"] = 8,\r\n    dietOptions[3].dietValue[\"buildingMuscleMass\"] = 6\r\n    // High Protein Diet\r\n    dietOptions[4].dietValue[\"amount\"] = 8,\r\n    dietOptions[4].dietValue[\"wellBeing\"] = 5,\r\n    dietOptions[4].dietValue[\"health\"] = 5,\r\n    dietOptions[4].dietValue[\"price\"] = 4,\r\n    dietOptions[4].dietValue[\"moreFat\"] = 6,\r\n    dietOptions[4].dietValue[\"buildingMuscleMass\"] = 9\r\n    // Traditional Diet\r\n    dietOptions[5].dietValue[\"amount\"] = 7,\r\n    dietOptions[5].dietValue[\"wellBeing\"] = 6,\r\n    dietOptions[5].dietValue[\"health\"] = 5,\r\n    dietOptions[5].dietValue[\"price\"] = 6,\r\n    dietOptions[5].dietValue[\"moreFat\"] = 5,\r\n    dietOptions[5].dietValue[\"buildingMuscleMass\"] = 6\r\n\r\n    return dietOptions;\r\n};\r\n*/","import React, {useState, useContext, useEffect, useMemo} from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { checkAnswers, calculateAHP } from '../../features/checkAnswers';\r\nimport { findDiet } from '../../features/calculateDietWeight';\r\nimport './CreateDietPage.css';\r\nimport { AppContext, IDietsResultsData, appContextType } from '../../App';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nexport interface IDietCriteriaData {\r\n  amount: number,\r\n  wellBeing: number,\r\n  health: number,\r\n  price: number,\r\n  moreFat: number,\r\n  buildingMuscleMass: number,\r\n};\r\n\r\n// I used this component to set together other components, which create the whole Create Diet page\r\nexport const CreateDietPage: React.FC = () => {\r\n const bmrContext = useContext<appContextType | null>(AppContext);\r\n const [isSub, setIsSubmitted] = useState<boolean | null>(false);\r\n const [isCorrect, setIsCorrect] = useState<boolean | null>(false);\r\n const [valueAhp, setAhp] = useState<Record<string, number> >({'' : 0});\r\n const [answers, setAnswers] = useState<IDietCriteriaData | null >({\r\n  amount: 0,\r\n  wellBeing: 0,\r\n  health: 0,\r\n  price: 0,\r\n  moreFat: 0,\r\n  buildingMuscleMass: 0,\r\n });\r\n \r\n const getTheBestDiet = useMemo<IDietsResultsData[]>(() => \r\n   findDiet(valueAhp),  \r\n  [valueAhp]\r\n );\r\n\r\n  const {\r\n    register,\r\n    reset,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm<IDietCriteriaData>();\r\n  \r\n  const onCreateCriteria = (data: IDietCriteriaData) => {\r\n    \r\n    if(checkAnswers(data)){\r\n      setAhp(calculateAHP(data));\r\n      setAnswers(data);\r\n      setIsCorrect(true);\r\n      console.log(answers); // is not necessary\r\n    }\r\n    else{\r\n      data.amount = 0;\r\n      data.wellBeing = 0;\r\n      data.health = 0;\r\n      data.price = 0;\r\n      data.moreFat = 0;\r\n      data.buildingMuscleMass = 0;\r\n      \r\n      setIsCorrect(false);\r\n    };\r\n    \r\n  };\r\n  \r\n  useEffect(() => {\r\n    document.addEventListener(\"submit\", () => {\r\n      bmrContext?.handleResultDiets(getTheBestDiet);\r\n    });\r\n  },[getTheBestDiet,bmrContext]);\r\n\r\n  const showDiets = () => {\r\n    return (\r\n      <div>\r\n        <div> {bmrContext?.ResultDiets[0]?.name} </div>\r\n        <div>{bmrContext?.ResultDiets[1]?.name} </div>\r\n      </div>\r\n    )\r\n  };\r\n/*\r\nconst showDiets = (answers : IDietCriteriaData) => {\r\n  setAhp(calculateAHP(answers));\r\n  bmrContext?.handleResultDiets(getTheBestDiet);\r\n  return (\r\n    <div>\r\n      <div> {bmrContext?.ResultDiets[0]?.name} </div>\r\n      <div>{bmrContext?.ResultDiets[1]?.name} </div>\r\n    </div>\r\n  )\r\n};*/\r\n\r\n  const navigate = useNavigate();\r\n  const NavigateToShowDiet = () => {\r\n    console.log(valueAhp);\r\n    console.log(getTheBestDiet);\r\n    navigate(\"/show-diet\"); // redirection to the crate diet page \r\n  };\r\n  const NavigateToCreateTarget = () => {\r\n    navigate(\"/create-target\"); // redirection to the create diet page \r\n  };\r\n\r\n\r\n  return (\r\n    <div className='create-diet-container'>\r\n      <form className=\"formCreateDiet\" onSubmit={handleSubmit(onCreateCriteria)}>\r\n        <header>\r\n          <h1>Create Diet</h1>\r\n        </header>\r\n        <div className=\"create-diet-container-form\">\r\n          <h4>The amount of food</h4>\r\n            <select {...register(\"amount\", { required: true })}>\r\n              <option value=\"1\">Completely Irrelevant</option>\r\n              <option value=\"3\">Very Little Important</option>\r\n              <option value=\"5\">Little Important</option>\r\n              <option value=\"7\">Important </option>\r\n              <option value=\"9\">Very Important</option>\r\n            </select>\r\n            {errors.amount && (\r\n              <p style={{ color: \"red\" }}>Please select one of the option</p>\r\n            )}\r\n            <h4>Your well-being</h4>\r\n            <select {...register(\"wellBeing\", { required: true })}>\r\n              <option value=\"1\">Completely Irrelevant</option>\r\n              <option value=\"3\">Very Little Important</option>\r\n              <option value=\"5\">Little Important</option>\r\n              <option value=\"7\">Important </option>\r\n              <option value=\"9\">Very Important</option>\r\n            </select>\r\n            {errors.wellBeing && (\r\n              <p style={{ color: \"red\" }}>Please select one of the option</p>\r\n            )}\r\n            <h4>Your health</h4>\r\n            <select {...register(\"health\", { required: true })}>\r\n              <option value=\"1\">Completely Irrelevant</option>\r\n              <option value=\"3\">Very Little Important</option>\r\n              <option value=\"5\">Little Important</option>\r\n              <option value=\"7\">Important </option>\r\n              <option value=\"9\">Very Important</option>\r\n            </select>\r\n            {errors.health && (\r\n              <p style={{ color: \"red\" }}>Please select one of the option</p>\r\n            )}\r\n            <h4>Price of food</h4>\r\n            <select {...register(\"price\", { required: true })}>\r\n              <option value=\"1\">Completely Irrelevant</option>\r\n              <option value=\"3\">Very Little Important</option>\r\n              <option value=\"5\">Little Important</option>\r\n              <option value=\"7\">Important </option>\r\n              <option value=\"9\">Very Important</option>\r\n            </select>\r\n            {errors.price && (\r\n              <p style={{ color: \"red\" }}>Please select one of the option</p>\r\n            )}\r\n            <h4>The amount of Fat</h4>\r\n            <select {...register(\"moreFat\", { required: true })}>\r\n              <option value=\"1\">Completely Irrelevant</option>\r\n              <option value=\"2\">Very Little Important</option>\r\n              <option value=\"5\">Little Important</option>\r\n              <option value=\"7\">Important </option>\r\n              <option value=\"9\">Very Important</option>\r\n            </select>\r\n            {errors.moreFat && (\r\n              <p style={{ color: \"red\" }}>Please select one of the option</p>\r\n            )}\r\n            <h4>Muscle Mass Building</h4>\r\n            <select {...register(\"buildingMuscleMass\", { required: true })}>\r\n              <option value=\"1\">Completely Irrelevant</option>\r\n              <option value=\"3\">Very Little Important</option>\r\n              <option value=\"5\">Little Important</option>\r\n              <option value=\"7\">Important </option>\r\n              <option value=\"9\">Very Important</option>\r\n            </select>\r\n            {errors.buildingMuscleMass && (\r\n              <p style={{ color: \"red\" }}>Please select one of the option</p>\r\n            )}\r\n             <div>\r\n              <input\r\n                type=\"submit\" \r\n                value=\"Calculate Diet\"\r\n                className=\"submitForm\"\r\n                onClick={() => { setIsSubmitted(true)\r\n                }}\r\n            />\r\n            </div>\r\n            <div>\r\n              <input\r\n                type=\"button\"\r\n                onClick={() => { reset();\r\n                }}\r\n                value=\"Clear\"\r\n                className=\"buttonForm\"\r\n              />\r\n            </div>\r\n        </div>\r\n      </form>\r\n      <div className='create-diet-result'>\r\n      <div>\r\n          {isCorrect ? (\r\n                <div>\r\n                  Your answers are ok \r\n                </div>\r\n              ) : (\r\n                <div>\r\n                  We can not find diet for you.\r\n                  Please Change your answers.\r\n                </div>\r\n              )}\r\n            </div>\r\n              {isCorrect && (\r\n              <div>\r\n                <h4> The best diets for you: </h4>\r\n                <div>\r\n                   { showDiets() }\r\n                </div>\r\n              </div>\r\n              )}\r\n          <div>\r\n          {isSub && isCorrect && (\r\n              <div>\r\n              <input\r\n                type=\"button\"\r\n                onClick={() => {                  \r\n                  NavigateToShowDiet();\r\n                  }}\r\n                value=\"Next\"\r\n                className=\"buttonForm\"\r\n              />\r\n          </div>\r\n          )}        \r\n        </div>\r\n        <div>\r\n            <input\r\n              type=\"button\"\r\n              onClick={() => {                  \r\n                NavigateToCreateTarget();\r\n              }}\r\n              value=\"Back to select your Target\"\r\n              className=\"buttonForm\"\r\n            />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n\r\n"],"names":["CreateAnswersMatrix","answersList","i","map","rowOfAnswers","answer","assumeRows","answersMatrix","reducer","accumulator","currentValue","reduce","sumeOfRow","push","calculateAHP","answers","amount","wellBeing","health","price","moreFat","buildingMuscleMass","sumeOfRows","a","b","aNumRows","length","aNumCols","bNumCols","m","Array","r","c","multiply","sumeOfMatrix","criterionsWeight","value","answersListDict","dietOptions","name","dietValue","_dietValue","_defineProperty","_dietValue2","_dietValue3","_dietValue4","_dietValue5","_dietValue6","CreateDietPage","bmrContext","useContext","AppContext","_useState","useState","_useState2","_slicedToArray","isSub","setIsSubmitted","_useState3","_useState4","isCorrect","setIsCorrect","_useState5","_useState6","valueAhp","setAhp","_useState7","_useState8","setAnswers","getTheBestDiet","useMemo","answersResult","_finalResult","finalResult","nameOfCriteria","forEach","dietOption","result","criteria","finalResultList","l","temp","j","temp2","findDiet","_useForm","useForm","register","reset","handleSubmit","errors","formState","useEffect","document","addEventListener","handleResultDiets","navigate","useNavigate","_jsxs","className","children","onSubmit","data","sumeOfColumns","assumeColumns","criterionsWeightList","sumeOfColumnsList","lambda","calculateLambda","checkAnswers","console","log","_jsx","_objectSpread","required","style","color","type","onClick","_bmrContext$ResultDie","_bmrContext$ResultDie2","ResultDiets","showDiets"],"sourceRoot":""}