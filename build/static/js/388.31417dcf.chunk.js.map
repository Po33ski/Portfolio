{"version":3,"file":"static/js/388.31417dcf.chunk.js","mappings":"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","sources":["components/MainPage/post.tsx","components/MainPage/ShowPost.tsx","components/MainPage/MainPage.tsx"],"sourcesContent":["import { Post as IPost} from \"./ShowPost\";\r\nimport {db, auth} from \"../../config/firebase\"\r\nimport { addDoc, collection, query, where, getDocs, deleteDoc, doc, } from \"firebase/firestore\";\r\nimport { useAuthState } from \"react-firebase-hooks/auth\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\n// this interface has been \"copied\" from another interface Post\r\ninterface Props {\r\n    post: IPost;\r\n    setPostsList: React.Dispatch<React.SetStateAction<IPost[] | null>>; \r\n}\r\n\r\n\r\n// new interface\r\ninterface Like {\r\n    likeId: string;\r\n    userId: string;\r\n}\r\n// This component represents the list of posts with likes handling\r\nexport const Post = (props: Props) => {\r\n    const {post} = props;\r\n    // give us information about the user\r\n    const [user] = useAuthState(auth); \r\n    // hook use state - likes is the list of Like interface\r\n    const [likes, setLikes] = useState<Like[] | null>(null);\r\n    // import likes from Firestore database\r\n    const likesRef = collection(db, 'likes');\r\n    // import posts from Firestore database\r\n    const postsRef = collection(db, \"posts\");\r\n    // The database query get the likes with proper id (related to post)\r\n    const likesDoc = query(likesRef, where(\"postId\", \"==\", post.id));  // using by getLikes\r\n    // it sets likes mapping the list of likes\r\n    const getLikes = async () => {\r\n        const data = await getDocs(likesDoc);\r\n        setLikes(data.docs.map((doc) => ({userId: doc.data().userId, likeId: doc.id})));\r\n    };\r\n    // This funtion add likes to the database\r\n    const addLike = async () => {\r\n        try { // exception handling\r\n            const newDoc = await addDoc(likesRef, { userId: user?.uid, \r\n                postId: \r\n                post.id \r\n            }); // add new doc and get the doc in the same time\r\n            if(user){ // set likes with condition\r\n            setLikes((prev) =>\r\n                prev \r\n                ? [...prev, {userId: user.uid, likeId: newDoc.id, }] \r\n                : [{userId: user.uid, likeId: newDoc.id}]\r\n            );\r\n        } \r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    };\r\n    // This funtion remove likes from database\r\n    const removeLike = async () => {\r\n        try {\r\n            \r\n            const likeToDeleteQuery = query(\r\n                likesRef, \r\n                where(\"postId\", \"==\", post.id), \r\n                where(\"userId\", \"==\", user?.uid)\r\n            );\r\n            \r\n            const likeToDeleteData = await getDocs(likeToDeleteQuery);\r\n            const likeId = likeToDeleteData.docs[0].id;\r\n            const likeToDelete = doc(db, \"likes\", likeId);\r\n            await deleteDoc(likeToDelete);\r\n            if(user){ // if not equal set the like\r\n                setLikes((prev) =>\r\n                    prev && prev.filter((like) => like.likeId !== likeId)\r\n                );\r\n            }\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    };\r\n\r\n    const removePost = async () => {  \r\n        try {\r\n            const postToDeleteQuery = query(\r\n                postsRef,\r\n                where(\"uniqueId\", \"==\", post.uniqueId), \r\n                where(\"userId\", \"==\", user?.uid)\r\n            );\r\n\r\n            const postToDeleteData = await getDocs(postToDeleteQuery);\r\n            const postId = postToDeleteData.docs[0].id;\r\n           \r\n            const postToDelete = doc(db, \"posts\", postId);\r\n            await deleteDoc(postToDelete);\r\n            if(user){ // delete post\r\n                props.setPostsList((prev) =>\r\n                    prev && prev.filter((post) => post.id !== postToDelete.id)\r\n                );\r\n            };\r\n            // delete likes\r\n            const likeToDeleteQuery = query(\r\n                likesRef, \r\n                where(\"postId\", \"==\", post.id)\r\n            );\r\n\r\n            const likeToDeleteData = await getDocs(likeToDeleteQuery);\r\n            for(let i = 0; i < likeToDeleteData.docs.length; i++){\r\n                const likeId = likeToDeleteData.docs[i].id;\r\n                const likeToDelete = doc(db, \"likes\", likeId);\r\n                await deleteDoc(likeToDelete);\r\n                if(user){ // if not equal set the like\r\n                    setLikes((prev) =>\r\n                        prev && prev.filter((like) => like.likeId !== likeId)\r\n                    );\r\n                };\r\n            };\r\n        } catch (err){\r\n            console.log(err);\r\n        }\r\n    }\r\n    // It checks if the user have added like before or no\r\n    const hasUserLiked = likes?.find((like) => like.userId === user?.uid);\r\n    // The hook performs \"side effects\". In this case it calls the funtion getLikes again if it is necessary\r\n    useEffect(() => {\r\n        getLikes();\r\n    }, []);\r\n    // The post component returns the list of posts \r\n    return(\r\n        <div>\r\n            <div className=\"title\">\r\n                <h1> {post.title}</h1>\r\n            </div>\r\n            <div className=\"body\">\r\n                <p> {post.description}</p>\r\n            </div>\r\n            <div>\r\n                <p> {post.uniqueId}</p>\r\n            </div>\r\n            <div className=\"footer\">\r\n                <p> @{post.username}</p>\r\n                <button onClick={hasUserLiked ? removeLike : addLike}> \r\n                    { hasUserLiked ? <>&#128078;</> : <>&#128077;</>} \r\n                </button>\r\n                {likes && <p> Likes: {likes?.length}</p>}\r\n                <button onClick={removePost}>\r\n                    remove\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\n\r\n/*\r\nimport { Post as IPost} from \"./show-post\";\r\nimport {db, auth} from \"../../config/firebase\"\r\nimport { addDoc, collection, query, where, getDocs, deleteDoc, doc } from \"firebase/firestore\";\r\nimport { useAuthState } from \"react-firebase-hooks/auth\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\n// this interface has been \"copied\" from another interface Post\r\ninterface Props {\r\n    post: IPost;\r\n}\r\n// new interface\r\ninterface Like {\r\n    likeId: string;\r\n    userId: string;\r\n    postId: string;\r\n}\r\n// This component represents the list of posts with likes handling\r\nexport const Post = (props: Props) => {\r\n    const {post} = props;\r\n    // give us information about the user\r\n    const [user] = useAuthState(auth); \r\n    // hook use state - likes is the list of Like interface\r\n    const [likes, setLikes] = useState<Like[] | null>(null);\r\n    // import likes from Firestore database\r\n    const likesRef = collection(db, 'likes');\r\n    // import posts from Firestore database\r\n    const postsRef = collection(db, \"posts\");\r\n    // The database query get the likes with proper id (related to post)\r\n    const likesDoc = query(likesRef, where(\"postId\", \"==\", post.id));  // using by getLikes\r\n    // it sets likes mapping the list of likes\r\n    const getLikes = async () => {\r\n        const data = await getDocs(likesDoc);\r\n        setLikes(data.docs.map((doc) => ({userId: doc.data().userId, likeId: doc.id })));\r\n    };\r\n    // This funtion add likes to the database\r\n    const addLike = async () => {\r\n        try { // exception handling\r\n            const newDoc = await addDoc(likesRef, { userId: user?.uid, \r\n                postId: \r\n                post.id \r\n            }); // add new doc and get the doc in the same time\r\n            if(user){ // set likes with condition\r\n            setLikes((prev) =>\r\n                prev \r\n                ? [...prev, {userId: user.uid, likeId: newDoc.id}] \r\n                : [{userId: user.uid, likeId: newDoc.id}]\r\n            );\r\n        } \r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    };\r\n    // This funtion remove likes from database\r\n    const removeLike = async () => {\r\n        try {\r\n            const likeToDeleteQuery = query(\r\n                likesRef, \r\n                where(\"postId\", \"==\", post.id), \r\n                where(\"userId\", \"==\", user?.uid)\r\n            );\r\n            \r\n            const likeToDeleteData = await getDocs(likeToDeleteQuery);\r\n            const likeId = likeToDeleteData.docs[0].id;\r\n            const likeToDelete = doc(db, \"likes\", likeId);\r\n            await deleteDoc(likeToDelete);\r\n            if(user){ // if not equal set the like\r\n                setLikes((prev) =>\r\n                    prev && prev.filter((like) => like.likeId !== likeId)\r\n                );\r\n            }\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    };\r\n\r\n    const removePost = async () => {\r\n        try {\r\n            const postToDeleteQuery = query(\r\n                postsRef, \r\n                where(\"postId\", \"==\", post.id), \r\n                where(\"userId\", \"==\", user?.uid)\r\n            );\r\n\r\n            const postToDeleteData = await getDocs(postToDeleteQuery);\r\n            const postId = postToDeleteData.docs[0].id;\r\n            const postToDelete = doc(db, \"posts\", postId);\r\n            await deleteDoc(postToDelete);\r\n            if(user){ // if not equal set the like\r\n                setLikes((like) =>\r\n                    like && like.filter((like) => like.postId !== likeId)\r\n                );\r\n            }\r\n        } catch (err){\r\n            console.log(err);\r\n        }\r\n    }\r\n    // It checks if the user have added like before or no\r\n    const hasUserLiked = likes?.find((like) => like.userId === user?.uid);\r\n    // The hook performs \"side effects\". In this case it calls the funtion getLikes again if it is necessary\r\n    useEffect(() => {\r\n        getLikes();\r\n    }, []);\r\n    // The post component returns the list of posts \r\n    return(\r\n        <div>\r\n            <div className=\"title\">\r\n                <h1> {post.title}</h1>\r\n            </div>\r\n            <div className=\"body\">\r\n                <p> {post.description}</p>\r\n            </div>\r\n            <div className=\"footer\">\r\n                <p> @{post.username}</p>\r\n                <button onClick={hasUserLiked ? removeLike : addLike}> \r\n                    { hasUserLiked ? <>&#128078;</> : <>&#128077;</>} \r\n                </button>\r\n                {likes && <p> Likes: {likes?.length}</p>}\r\n                <button onClick={removePost}>\r\n                    remove\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n};\r\n*/","import {getDocs, collection} from 'firebase/firestore';\r\nimport {db} from '../../config/firebase';\r\nimport {useEffect, useState} from \"react\";\r\nimport { Post } from \"./post\";\r\n\r\n// interface\r\nexport interface Post {\r\n    title: string;\r\n    description: string;\r\n    id: string;\r\n    userId: string;\r\n    username: string;\r\n    uniqueId: string;\r\n}\r\n// This component shows posts with likes on the page \"create post\"\r\nexport const ShowPosts = () => {\r\n    // 2 hooks \r\n    const [postsList, setPostsList] = useState<Post[] | null>(null); // define what type is setPostsList \r\n    const postsRef = collection(db, \"posts\");\r\n    //  This set the list of posts in the postsList\r\n    const getPosts = async () => {\r\n        const data = await getDocs(postsRef);\r\n        setPostsList(data.docs.map((doc) => (\r\n            {...doc.data(), \r\n            id: doc.id}\r\n            )) as Post[]); // as post array\r\n    };\r\n    // The hook performs \"side effects\". In this case it calls the funtion getPosts again if it is necessary\r\n    useEffect(() => {\r\n        getPosts();\r\n    }, []); // create postsList every time you render the main\r\n    // it returns the all posts if it is not null\r\n    return (\r\n        <div> \r\n            {postsList?.map((post, index) => (\r\n                <div  key={index}>\r\n                    <Post post={post} setPostsList={setPostsList}/>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React, {useState, useRef} from 'react';\r\nimport {ShowPosts} from './ShowPost'\r\nimport './MainPage.css';\r\n\r\n// It's main page with description of me and short descripton of this project\r\n\r\nconst myCoverLetter : string = `I started programming at the Polytechnic. \r\nMy first language was Python and C++. When I started learning C++ I discovered my passion to programming. \r\nI can program in C++, C#, Java Script, Type Script and I know the basics of SQL and Python. \r\nAt the beginning programming in C++ turned out to be the most interesting for me.  \r\nI have been learning this language for 2 years from books such as Opus Magnum C ++ by Jerzy Grebosz or The C ++ Programming Language by Bjarne Stroustrup and others. \r\nAfter a while I started to learn C # and I liked its full objectivity.\r\nI learned C++ from online courses, however, it was the books and practice that gave me the most knowledge.\r\nI have a good understanding of object oriented programming and memory management.\r\nCurrently, I am mainly interested in web programming and for a long time I have been learning React and developing my projects in it.\r\nI also know other languages ​​needed in web programming, i.e. HTML and CSS.\r\nI practice my algorithmic skills solving tasks on codewars.com, which is a form of entertainment for me. \r\n`;\r\n\r\nconst myProject : string = `This is calories calculator. Using it, you can calculate your caloric needs.\r\nOn the Show Diets page you will see what the proportions of nutritional values ​​should be depending on the diet.\r\nAfter you calculate your BMR and choose your target, you will be redirected to the page, that shows the best diet for you.\r\nIf you are not logged in, you can only calculate your BMR. \r\nIf you enter the name of some page that is not available without logging in in the address of the application, \r\nthen the website will not be opened.\r\nI will tell you more about this project during the job interview:)\r\nI created this project using Type Script and React. \r\n`;\r\n\r\nexport const MainPage: React.FC = () => {\r\n\r\n  return (\r\n    <div className=\"main-page\">\r\n      <h1>About Me</h1>\r\n      <div>\r\n        {myCoverLetter}\r\n      </div>\r\n      <h1>About This Project</h1>\r\n      <div>\r\n        {myProject}\r\n      </div>\r\n      <h1>Posts:</h1>\r\n      <div>\r\n        <ShowPosts/>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n"],"names":["Post","props","post","_useAuthState","useAuthState","auth","user","_slicedToArray","_useState","useState","_useState2","likes","setLikes","likesRef","collection","db","postsRef","likesDoc","query","where","id","getLikes","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","wrap","_context","prev","next","getDocs","sent","docs","map","doc","userId","likeId","stop","apply","arguments","addLike","_ref2","_callee2","newDoc","_context2","addDoc","uid","postId","concat","_toConsumableArray","t0","console","log","removeLike","_ref3","_callee3","likeToDeleteQuery","likeToDeleteData","likeToDelete","_context3","deleteDoc","filter","like","removePost","_ref4","_callee4","postToDeleteQuery","postToDeleteData","postToDelete","_loop","i","_context5","uniqueId","setPostsList","_context4","length","delegateYield","t1","hasUserLiked","find","useEffect","_jsxs","children","_jsx","className","title","description","username","onClick","_Fragment","ShowPosts","postsList","getPosts","_objectSpread","index","MainPage"],"sourceRoot":""}